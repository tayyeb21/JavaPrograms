package JavaOperatorsExpression;

public class BitWiseOperators {
	public static void main(String[] args) {
		/* 
		 * Bitwise Operator only works with integer data type and also only returns inteeger values
		 */
		int x = 10; // 1010 0b1010
		int y = 6; //  0110 0b0110
		int and, or, xor, not, rshift, unsignedRShift, lshift;
		
		/*
		 * & operator performms AND operations on integer
		 * | operator performms OR operations on integer
		 * ^ operator performms XOR operations on integer
		 */
		and = x & y; 
		or = x | y;
		xor = x ^ y;
		System.out.printf("AND Operation: %d %nOR Operation: %d %nXOR Operation: %d %n", and, or, xor);
		
		/*
		 * LEFT SHIFT
		 * LEFT SHIFT operator shifts the bits one place to the left that vacant the right most bit position which is filled by 0;
		 * It ignores the value at left most bit and change it to 0 before sign bit
		 * The left shift operator doubles the number means if the number is left shifted by k place it will increase the number by:
		 *                                  number * 2^k
		 */
		x = -10;
		lshift = x<<1;
		System.out.println("LEFT Shift: " + lshift);
		
		/*
		 * Right SHIFT
		 * RIGHT SHIFT operator shifts the bits one place to the right that vacant the left most bit position before signed bit which is filled by 0;
		 * It ignores the value at right most bit before change it to 0 
		 * The right shift operator divides the number by:
		 *              number / 2^k
		 * Right shift operator keeps the sign bit in its place meaning it do not right shift the sign bit at beginning hence keeps the number negative
		 * Negative number in java is represented in 2's complement form                
		 */
		
		// x = -10;
		rshift = x>>1;
		System.out.println("Right Shift: " + rshift);
		
		/*
		 * Unsigned Right SHIFT
		 * Unsigned Right SHIFT operator shifts the bits one place to the rigth including the sign bit hence it converts the number in positive but value may change;
		 * Meaning -10 will be changed to 123 because -10 is represented in following manner in java
		 * 11110110 [Have taken 1 byte representation however in java it is of 4 byte]
		 * First 1 of above bits represents sign bit where 1 is minus and 0 is plus
		 * After performing unsigned right shift on above bits it will be converted in following bits
		 * 01111011                 
		 */
		
		// x = -10;
		unsignedRShift = x>>>1;
		System.out.println("Unsigned Right Shift: " + unsignedRShift);
		
	}
}
